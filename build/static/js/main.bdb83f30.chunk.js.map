{"version":3,"sources":["app/header/Header.js","app/maze/MazeNode.js","app/maze/NodeBuilder.js","app/maze/MazeSolver.js","app/maze/Maze.js","app/App.js","serviceWorker.js","index.js"],"names":["Header","className","href","React","Component","MazeNode","id","value","this","upNode","rightNode","downNode","leftNode","isVisited","node","setDownNode","setUpNode","setLeftNode","setRightNode","NodeBuilder","array","parentNode","store","startKey","length","i","j","upKey","downKey","rightKey","leftKey","getNode","key","undefined","MazeSolver","arrayBackGroundColor","stack","isEnd","push","console","log","solve","pop","tokens","split","Maze","props","onMazeItemCallback","message","mazeItemValue","onButtonClick","row","col","nodeBuilder","setState","onSolveClick","build","startNode","getStartNode","mazeSolver","colorNodes","onReset","window","location","reload","state","axisHidden","initialize","pathname","map","rowItem","rowIndex","columns","colItem","colIndex","uuidv4","style","width","height","backgroundColor","onClick","hidden","fontSize","type","marginRight","withRouter","App","handleChange","event","target","handleSubmit","preventDefault","mazeItemCallback","start","maxItemValue","isEndButtonEnabled","isWallButtonEnabled","isStartButtonEnabled","isOpenButtonEnabled","end","counter","marginBottom","role","aria-label","disabled","basename","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bdb83f30.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-xl navbar-light bg-light\">\n                <a className=\"navbar-brand\" href=\"/\">Home</a>\n            </nav>\n        );\n    }\n}\n\nexport default Header;\n","class MazeNode {\n    constructor(id, value) {\n        this.id = id;\n        this.value = value;\n        this.upNode = null;\n        this.rightNode = null;\n        this.downNode = null;\n        this.leftNode = null;\n        this.isVisited = false;\n    }\n\n    setUpNode(node) {\n        this.upNode = node;\n        if (node.downNode == null)\n            node.setDownNode(this);\n    }\n\n    setDownNode(node) {\n        this.downNode = node;\n        if (node.upNode == null){\n            node.setUpNode(this);\n        }\n    }   \n\n    setRightNode(node) {\n        this.rightNode = node;\n        if (node.leftNode == null) {\n            node.setLeftNode(this);\n        }\n    }\n\n    setLeftNode(node) {\n        this.leftNode = node;\n        if (node.rightNode == null) {\n            node.setRightNode(this);\n        }\n    }\n\n    setId(id) {\n        this.id = id;\n    }\n}\nexport default MazeNode;","import MazeNode from './MazeNode';\n\nclass NodeBuilder {\n    constructor(array) {\n        this.array = array;\n        this.parentNode = null;\n        this.store = {};\n        this.startKey = '';\n    }\n\n    /**\n     * create nodes out of\n     */\n    build() {\n        const length = this.array.length;\n        this.parentNode = new MazeNode(\"0-0\", this.array[0][0]);\n        this.store[\"0-0\"] = this.parentNode;\n        let node = this.parentNode;\n        for (let i = 0; i <= length - 1; i++) {\n            for (let j = 0; j <= length - 1; j++) {\n                const upKey = `${i + 1}-${j}`;\n                const downKey = `${i - 1}-${j}`;\n                const rightKey = `${i}-${j + 1}`;\n                const leftKey = `${i}-${j - 1}`;\n                node = this.getNode(`${i}-${j}`, i, j);\n\n                if (i > 0) {// set down node\n                    const downNode = this.getNode(downKey, i - 1, j)\n                    node.setDownNode(downNode);\n                    this.store[downNode] = downNode;\n                }\n                if (j > 0) { //set left node\n                    const leftNode = this.getNode(leftKey, i, j - 1);\n                    node.setLeftNode(leftNode);\n                    this.store[leftKey] = leftNode;\n                }\n                if (j + 1 < length) {//set right node\n                    const rightNode = this.getNode(rightKey, i, j + 1);\n                    node.setRightNode(rightNode);\n                    this.store[rightKey] = rightNode;\n                }\n                if (i + 1 < length) {//set up node\n                    const upNode = this.getNode(upKey, i + 1, j)\n                    node.setUpNode(upNode);\n                    this.store[upKey] = upNode;\n                }\n            }\n        }\n    }\n\n    /**\n     * \n     * @param {*} key \n     * @param {*} i \n     * @param {*} j \n     */\n    getNode(key, i, j) {\n        let node = this.store[key];\n        if (node === null || node === undefined) {\n            node = new MazeNode(key, this.array[i][j]);\n        }\n        return node;\n    }\n\n    getStartNode() {\n        return this.store[this.startKey];\n    }\n}\n\nexport default NodeBuilder;","class MazeSolver {\n    constructor(arrayBackGroundColor) {\n        this.arrayBackGroundColor = arrayBackGroundColor;\n        this.stack = [];\n        this.isEnd = false;\n    }\n\n    /**\n     * \n     * @param {*} node \n     */\n    solve(node) {\n        if (this.isEnd || node.isVisited) return;\n        node.isVisited = true;\n        this.stack.push(node.id);\n        if (node.value === \"e\") {\n            console.log(\"goal has been reached\");\n            this.isEnd = true;\n            return;\n        }\n        if (node.value === \"w\") {\n            this.stack.pop();\n            return;\n        }\n\n        if (node.upNode !== null && !node.upNode.isVisited) {\n            this.solve(node.upNode);\n        }\n\n        if (node.rightNode !== null && !node.rightNode.isVisited) {\n            this.solve(node.rightNode);\n        }\n\n        if (node.downNode !== null  && !node.downNode.isVisited) {\n            this.solve(node.downNode);\n        }\n\n        if (node.leftNode !== null  && !node.leftNode.isVisited) {\n            this.solve(node.leftNode);\n        }\n    }\n\n    colorNodes() {\n        for (let item of this.stack) {\n            let tokens = item.split(\"-\");\n            this.arrayBackGroundColor[tokens[0]][tokens[1]] = 'green';\n        }\n        return this.arrayBackGroundColor;\n    }\n}\nexport default MazeSolver;","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { withRouter } from 'react-router-dom'\nimport NodeBuilder from './NodeBuilder';\nimport MazeSolver from './MazeSolver';\nimport queryString from 'query-string';\nimport './Maze.css';\n\nclass Maze extends React.Component {\n    constructor(props) {\n        super(props);\n        this.array = [\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5]\n        ];\n        this.arrayBackGroundColor = [\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5],\n            [0,1,2,3,4,5]            \n        ];\n        this.state = {\n            array: this.array,\n            arrayBackGroundColor: this.arrayBackGroundColor,\n            mazeItemValue: '',\n            axisHidden: true\n        };\n        \n        this.nodeBuilder = new NodeBuilder(this.array);\n        this.mazeSolver = new MazeSolver(this.arrayBackGroundColor);\n    }\n\n    initialize() {\n        for (let row = 0; row < this.array.length; row++) {\n            for (let col = 0; col < this.array.length; col++) {\n                this.array[row][col] = '';\n                this.arrayBackGroundColor[row][col] = '';\n            }\n        }\n    }\n\n\n    onMazeItemCallback = (message) => {\n        this.props.onMazeItemCallback(this.props.mazeItemValue);\n    }\n\n    componentDidMount() {\n        this.initialize();\n        this.setState({array: this.array});\n        const value = this.props.location.pathname === '/';\n        this.setState({axisHidden: value});\n    }\n    \n    /**\n     * \n     * @param {*} row \n     * @param {*} col \n     */\n    onButtonClick = (row, col) => {\n        if (this.props.mazeItemValue === '') {\n            this.nodeBuilder.startKey = `${row}-${col}`;\n        }\n        this.array[row][col] = (this.props.mazeItemValue === '') ? 's' : this.props.mazeItemValue;\n        this.setState({array: this.array});\n        this.props.onMazeItemCallback(this.array[row][col]);\n    }\n\n    /**\n     * \n     */\n    onSolveClick = () => {\n        this.nodeBuilder.build();\n        const startNode = this.nodeBuilder.getStartNode();\n        this.mazeSolver.solve(startNode);\n        const stack = this.mazeSolver.stack;\n        const arrayBackGroundColor = this.mazeSolver.colorNodes(stack);\n        this.setState({arrayBackGroundColor: arrayBackGroundColor});\n    }\n    \n    /**\n     * \n     */\n    onReset = () => {\n        window.location.reload(false);\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"d-flex flex-row justify-content-center mb-12\">\n                    {this.state.array.map((rowItem, rowIndex) => {\n                        let columns = rowItem.map((colItem, colIndex) => {\n                            return <button key={uuidv4()}  \n                                            style={{\n                                                width: '100px', \n                                                height: '50px', \n                                                backgroundColor: this.state.arrayBackGroundColor[rowIndex][colIndex]\n                                            }} \n                                            onClick={() => this.onButtonClick(rowIndex, colIndex)}>\n                                    <span hidden={this.state.axisHidden} style={{fontSize: '8px'}}>${rowIndex}-${colIndex}</span>\n                                    {this.state.array[rowIndex][colIndex]}</button>;\n                        });\n                        return <div key={uuidv4()} className=\"d-flex flex-column bd-highlight mb-3\">{columns}</div>\n                    })}\n                </div>\n                <div className=\"d-flex flex-row justify-content-center mb-12\">\n                    <button  type=\"button\" className=\"btn btn-primary-outline\" onClick={this.onSolveClick}>Solve</button>\n                    <button style={{marginRight: '10px'}}  type=\"button\" className=\"btn btn btn-primary-outline\" onClick={this.onReset}>Reset</button>\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(Maze);","import React from 'react';\n// import './App.css';\nimport Header from './header/Header';\n// import PropTypes from 'prop-types';\n// import Footer from './footer/Footer';\nimport Maze from './maze/Maze';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isStartButtonEnabled: true,\n            isEndButtonEnabled: false,\n            isWallButtonEnabled: false,\n            isOpenButtonEnabled: false,\n            maxItemValue: ''\n        };\n        this.start = false;\n        this.end = false;\n        this.counter = 0;\n    }\n    \n    handleChange = (event) => {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n    }\n\n    mazeItemCallback = (message) => {\n        switch(message) {\n                case '':\n                    this.start = true;\n                    this.setState({maxItemValue: 's'});\n                    break;\n            case 's':\n                this.start = true;\n                this.setState({\n                    isEndButtonEnabled: true,\n                    isWallButtonEnabled: false,\n                    isStartButtonEnabled: false,\n                    isOpenButtonEnabled: false,\n                    maxItemValue: 'e'});\n                break;\n            case 'e':\n                this.end = true;\n                this.setState({\n                    maxItemValue: 'w',\n                    isStartButtonEnabled: false,\n                    isEndButtonEnabled: false,\n                    isWallButtonEnabled: true,\n                    isOpenButtonEnabled: true});\n                break;\n            case 'w':\n                this.setState({maxItemValue: 'w'});\n                break;\n            case 'o':\n                this.setState({maxItemValue: ''});\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n        return (\n        <div className=\"App\">\n            <Header/>\n                <section>\n                    <ul>\n                        <li><div style={{marginBottom: '20px'}}>\n                        I wanted to learn what's the fuzz about ReactJs so this is my test project. It's fairly straighforward framework\n                with a few challenges I've encountered coming from Angular. It has its pros and cons. Am I liking it? every technology\n                has it's usages. I chose <b>Depth First Search and simple heuristic (right, down, left, up) </b> to compliment the algo. \n                        </div>\n                        </li>\n                        <li>\n                            <b>INSTRUCTIONS:</b>\n                            <ul>\n                                <li>A 6x6 grid can be populated by clicking</li>\n                                <li>First click will mark an \"s\" which will denote the start of the puzzle</li>\n                                <li>Second click will mark an \"e\" which will denote the end or goal of the puzzle</li>\n                                <li>Wall button will mark a \"w\" which will denote a wall or an obstacle</li>\n                                <li>Open button will mark a grid empty or free space</li>\n                                <li>Solve button will initiate the puzzle solving process</li>\n                                <li>Reset button will reset the process</li>\n                            </ul>\n                        </li>\n                    </ul>\n                \n                </section>\n            <br/>\n            <div className=\"d-flex flex-row justify-content-center mb-12\">\n                <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                    <div className=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\">\n                        <button style={{marginRight: '10px'}} type=\"button\" className=\"btn btn-primary-outline button-spacer\" disabled={!this.state.isStartButtonEnabled}>Start</button>\n                        <button style={{marginRight: '10px'}} type=\"button\" className=\"btn btn-primary-outline button-spacer\" disabled={!this.state.isEndButtonEnabled}>End</button>\n                        <button style={{marginRight: '10px'}} type=\"button\" className=\"btn btn-primary-outline button-spacer\" onClick={() => this.mazeItemCallback('w')} disabled={!this.state.isWallButtonEnabled}>Wall</button>\n                        <button style={{marginRight: '10px'}} type=\"button\" className=\"btn btn-primary-outline button-spacer\" onClick={() => this.mazeItemCallback('o')} disabled={!this.state.isOpenButtonEnabled}>Open</button>\n                    </div>\n                </div>\n                \n            </div>\n            <br/>\n            \n            {/* <Footer/> */}\n            <BrowserRouter basename='http://localhost:3000'>\n                <Switch>\n                    <Route path=\"/\">\n                        <Maze onMazeItemCallback={this.mazeItemCallback} mazeItemValue={this.state.maxItemValue}/>\n                    </Route>\n                    <Route path=\"/:axisHidden\">\n                        <Maze onMazeItemCallback={this.mazeItemCallback} mazeItemValue={this.state.maxItemValue}/>\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </div>\n        );\n    }\n}\n    \n// componentDidMount() {\n\n// }\n\n// componentWillUnmount() {\n\n// }\n\n// App.propTypes = {\n//     appname: PropTypes.number.isRequired\n// }\n\n// App.defaultProps = {\n//     appname: 123\n// }\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}